// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wavemq.proto

package pb

/*
Version 1.0
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishParams struct {
	Perspective *Perspective     `protobuf:"bytes,1,opt,name=perspective,proto3" json:"perspective,omitempty"`
	Namespace   []byte           `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri         string           `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Content     []*PayloadObject `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`
	// If specified, the message will be encrypted
	EncryptionPartition [][]byte `protobuf:"bytes,5,rep,name=encryptionPartition,proto3" json:"encryptionPartition,omitempty"`
	// If specified a proof with these specific properties will be
	// attached to the message, rather than just a publish proof.
	// The namespace can be omitted, but all other normal fields must
	// be filled in
	ExtraStatements []*RTreePolicyStatement `protobuf:"bytes,6,rep,name=extraStatements,proto3" json:"extraStatements,omitempty"`
	// If specified, this proof will be used instead of building one
	CustomProofDER       []byte   `protobuf:"bytes,7,opt,name=customProofDER,proto3" json:"customProofDER,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishParams) Reset()         { *m = PublishParams{} }
func (m *PublishParams) String() string { return proto.CompactTextString(m) }
func (*PublishParams) ProtoMessage()    {}
func (*PublishParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_9420371c4a529f9a, []int{0}
}
func (m *PublishParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishParams.Unmarshal(m, b)
}
func (m *PublishParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishParams.Marshal(b, m, deterministic)
}
func (dst *PublishParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishParams.Merge(dst, src)
}
func (m *PublishParams) XXX_Size() int {
	return xxx_messageInfo_PublishParams.Size(m)
}
func (m *PublishParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishParams.DiscardUnknown(m)
}

var xxx_messageInfo_PublishParams proto.InternalMessageInfo

func (m *PublishParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *PublishParams) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *PublishParams) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PublishParams) GetContent() []*PayloadObject {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PublishParams) GetEncryptionPartition() [][]byte {
	if m != nil {
		return m.EncryptionPartition
	}
	return nil
}

func (m *PublishParams) GetExtraStatements() []*RTreePolicyStatement {
	if m != nil {
		return m.ExtraStatements
	}
	return nil
}

func (m *PublishParams) GetCustomProofDER() []byte {
	if m != nil {
		return m.CustomProofDER
	}
	return nil
}

type PublishResponse struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_9420371c4a529f9a, []int{1}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (dst *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(dst, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Message struct {
	Proof                *Proof           `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofDER             []byte           `protobuf:"bytes,2,opt,name=proofDER,proto3" json:"proofDER,omitempty"`
	Namespace            []byte           `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri                  string           `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	EncryptionPartition  [][]byte         `protobuf:"bytes,5,rep,name=encryptionPartition,proto3" json:"encryptionPartition,omitempty"`
	Timestamps           []int64          `protobuf:"varint,6,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Drops                []int64          `protobuf:"varint,7,rep,packed,name=drops,proto3" json:"drops,omitempty"`
	Content              []*PayloadObject `protobuf:"bytes,8,rep,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_9420371c4a529f9a, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *Message) GetProofDER() []byte {
	if m != nil {
		return m.ProofDER
	}
	return nil
}

func (m *Message) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Message) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Message) GetEncryptionPartition() [][]byte {
	if m != nil {
		return m.EncryptionPartition
	}
	return nil
}

func (m *Message) GetTimestamps() []int64 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *Message) GetDrops() []int64 {
	if m != nil {
		return m.Drops
	}
	return nil
}

func (m *Message) GetContent() []*PayloadObject {
	if m != nil {
		return m.Content
	}
	return nil
}

type PayloadObject struct {
	Schema               string   `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayloadObject) Reset()         { *m = PayloadObject{} }
func (m *PayloadObject) String() string { return proto.CompactTextString(m) }
func (*PayloadObject) ProtoMessage()    {}
func (*PayloadObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_9420371c4a529f9a, []int{3}
}
func (m *PayloadObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayloadObject.Unmarshal(m, b)
}
func (m *PayloadObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayloadObject.Marshal(b, m, deterministic)
}
func (dst *PayloadObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadObject.Merge(dst, src)
}
func (m *PayloadObject) XXX_Size() int {
	return xxx_messageInfo_PayloadObject.Size(m)
}
func (m *PayloadObject) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadObject.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadObject proto.InternalMessageInfo

func (m *PayloadObject) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *PayloadObject) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type SubscribeParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective,proto3" json:"perspective,omitempty"`
	Namespace   []byte       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri         string       `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// Require that messages published to the given resource have a superset
	// of the following statements in their proof. Messages that fail these
	// but pass the normal publish requirements will still be delivered
	// but marked as failed if dropFailedExtra is false
	ExtraRequiredPolicy []*RTreePolicyStatement `protobuf:"bytes,4,rep,name=extraRequiredPolicy,proto3" json:"extraRequiredPolicy,omitempty"`
	DropFailedExtra     bool                    `protobuf:"varint,5,opt,name=dropFailedExtra,proto3" json:"dropFailedExtra,omitempty"`
	// If specified, this proof will be used instead of building one for the
	// subscribe
	CustomProofDER       []byte   `protobuf:"bytes,6,opt,name=customProofDER,proto3" json:"customProofDER,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeParams) Reset()         { *m = SubscribeParams{} }
func (m *SubscribeParams) String() string { return proto.CompactTextString(m) }
func (*SubscribeParams) ProtoMessage()    {}
func (*SubscribeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_9420371c4a529f9a, []int{4}
}
func (m *SubscribeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeParams.Unmarshal(m, b)
}
func (m *SubscribeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeParams.Marshal(b, m, deterministic)
}
func (dst *SubscribeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeParams.Merge(dst, src)
}
func (m *SubscribeParams) XXX_Size() int {
	return xxx_messageInfo_SubscribeParams.Size(m)
}
func (m *SubscribeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeParams.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeParams proto.InternalMessageInfo

func (m *SubscribeParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *SubscribeParams) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *SubscribeParams) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SubscribeParams) GetExtraRequiredPolicy() []*RTreePolicyStatement {
	if m != nil {
		return m.ExtraRequiredPolicy
	}
	return nil
}

func (m *SubscribeParams) GetDropFailedExtra() bool {
	if m != nil {
		return m.DropFailedExtra
	}
	return false
}

func (m *SubscribeParams) GetCustomProofDER() []byte {
	if m != nil {
		return m.CustomProofDER
	}
	return nil
}

type SubscriptionMessage struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// If a message came in that failed one of the additional validation
	// requirements, this field will be set and the message will still
	// be included. If the message failed the publish requirements then
	// no SubscriptionMessage will be sent at all, because the sender was
	// aware the message would fail, so must be malicious.
	FailedValidation     *Error   `protobuf:"bytes,2,opt,name=failedValidation,proto3" json:"failedValidation,omitempty"`
	Message              *Message `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionMessage) Reset()         { *m = SubscriptionMessage{} }
func (m *SubscriptionMessage) String() string { return proto.CompactTextString(m) }
func (*SubscriptionMessage) ProtoMessage()    {}
func (*SubscriptionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_9420371c4a529f9a, []int{5}
}
func (m *SubscriptionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionMessage.Unmarshal(m, b)
}
func (m *SubscriptionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionMessage.Marshal(b, m, deterministic)
}
func (dst *SubscriptionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionMessage.Merge(dst, src)
}
func (m *SubscriptionMessage) XXX_Size() int {
	return xxx_messageInfo_SubscriptionMessage.Size(m)
}
func (m *SubscriptionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionMessage proto.InternalMessageInfo

func (m *SubscriptionMessage) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SubscriptionMessage) GetFailedValidation() *Error {
	if m != nil {
		return m.FailedValidation
	}
	return nil
}

func (m *SubscriptionMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishParams)(nil), "pb.PublishParams")
	proto.RegisterType((*PublishResponse)(nil), "pb.PublishResponse")
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*PayloadObject)(nil), "pb.PayloadObject")
	proto.RegisterType((*SubscribeParams)(nil), "pb.SubscribeParams")
	proto.RegisterType((*SubscriptionMessage)(nil), "pb.SubscriptionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WAVEMQClient is the client API for WAVEMQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WAVEMQClient interface {
	Publish(ctx context.Context, in *PublishParams, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeParams, opts ...grpc.CallOption) (WAVEMQ_SubscribeClient, error)
}

type wAVEMQClient struct {
	cc *grpc.ClientConn
}

func NewWAVEMQClient(cc *grpc.ClientConn) WAVEMQClient {
	return &wAVEMQClient{cc}
}

func (c *wAVEMQClient) Publish(ctx context.Context, in *PublishParams, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/pb.WAVEMQ/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEMQClient) Subscribe(ctx context.Context, in *SubscribeParams, opts ...grpc.CallOption) (WAVEMQ_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WAVEMQ_serviceDesc.Streams[0], "/pb.WAVEMQ/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wAVEMQSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WAVEMQ_SubscribeClient interface {
	Recv() (*SubscriptionMessage, error)
	grpc.ClientStream
}

type wAVEMQSubscribeClient struct {
	grpc.ClientStream
}

func (x *wAVEMQSubscribeClient) Recv() (*SubscriptionMessage, error) {
	m := new(SubscriptionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WAVEMQServer is the server API for WAVEMQ service.
type WAVEMQServer interface {
	Publish(context.Context, *PublishParams) (*PublishResponse, error)
	Subscribe(*SubscribeParams, WAVEMQ_SubscribeServer) error
}

func RegisterWAVEMQServer(s *grpc.Server, srv WAVEMQServer) {
	s.RegisterService(&_WAVEMQ_serviceDesc, srv)
}

func _WAVEMQ_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEMQServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVEMQ/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEMQServer).Publish(ctx, req.(*PublishParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVEMQ_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WAVEMQServer).Subscribe(m, &wAVEMQSubscribeServer{stream})
}

type WAVEMQ_SubscribeServer interface {
	Send(*SubscriptionMessage) error
	grpc.ServerStream
}

type wAVEMQSubscribeServer struct {
	grpc.ServerStream
}

func (x *wAVEMQSubscribeServer) Send(m *SubscriptionMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _WAVEMQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WAVEMQ",
	HandlerType: (*WAVEMQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _WAVEMQ_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _WAVEMQ_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wavemq.proto",
}

func init() { proto.RegisterFile("wavemq.proto", fileDescriptor_wavemq_9420371c4a529f9a) }

var fileDescriptor_wavemq_9420371c4a529f9a = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0x55, 0x92, 0xb5, 0x59, 0x6f, 0xbb, 0xaf, 0xfb, 0x5c, 0x04, 0x56, 0x85, 0x20, 0xaa, 0x04,
	0x8a, 0x84, 0x54, 0x6d, 0x45, 0x3c, 0xf1, 0x34, 0x44, 0x79, 0x40, 0x9a, 0x08, 0x1e, 0x1a, 0xcf,
	0x4e, 0x7a, 0xc7, 0x8c, 0x9a, 0xd8, 0xb3, 0xdd, 0xb1, 0xfe, 0x06, 0xde, 0x10, 0x7f, 0x87, 0xff,
	0x86, 0xe2, 0xa4, 0x6d, 0x56, 0x3a, 0x10, 0x2f, 0xbc, 0xf9, 0x9e, 0x7b, 0x7c, 0xaf, 0x7d, 0xee,
	0xb1, 0xa1, 0xf7, 0x85, 0x5f, 0x63, 0x7e, 0x35, 0x56, 0x5a, 0x5a, 0x49, 0x7c, 0x95, 0x0e, 0x01,
	0xb9, 0x12, 0x55, 0x3c, 0xfa, 0xe1, 0xc3, 0x41, 0xb2, 0x48, 0xe7, 0xc2, 0x5c, 0x26, 0x5c, 0xf3,
	0xdc, 0x90, 0x63, 0xe8, 0x2a, 0xd4, 0x46, 0x61, 0x66, 0xc5, 0x35, 0x52, 0x2f, 0xf2, 0xe2, 0xee,
	0xa4, 0x3f, 0x56, 0xe9, 0x38, 0xd9, 0xc0, 0xac, 0xc9, 0x21, 0x0f, 0xa1, 0x53, 0xf0, 0x1c, 0x8d,
	0xe2, 0x19, 0x52, 0x3f, 0xf2, 0xe2, 0x1e, 0xdb, 0x00, 0xe4, 0x10, 0x82, 0x85, 0x16, 0x34, 0x88,
	0xbc, 0xb8, 0xc3, 0xca, 0x25, 0x79, 0x06, 0x61, 0x26, 0x0b, 0x8b, 0x85, 0xa5, 0x7b, 0x51, 0x10,
	0x77, 0x27, 0xff, 0xbb, 0xf2, 0x7c, 0x39, 0x97, 0x7c, 0xf6, 0x2e, 0xfd, 0x8c, 0x99, 0x65, 0x2b,
	0x06, 0x39, 0x82, 0x01, 0x16, 0x99, 0x5e, 0x2a, 0x2b, 0x64, 0x91, 0x70, 0x6d, 0x45, 0xb9, 0xa0,
	0xad, 0x28, 0x88, 0x7b, 0x6c, 0x57, 0x8a, 0xbc, 0x82, 0x3e, 0xde, 0x58, 0xcd, 0xcf, 0x2c, 0xb7,
	0x98, 0x63, 0x61, 0x0d, 0x6d, 0xbb, 0x36, 0xb4, 0x6c, 0xc3, 0x3e, 0x68, 0xc4, 0x44, 0xce, 0x45,
	0xb6, 0x5c, 0x13, 0xd8, 0xf6, 0x06, 0xf2, 0x14, 0xfe, 0xcb, 0x16, 0xc6, 0xca, 0x3c, 0xd1, 0x52,
	0x5e, 0xbc, 0x9e, 0x32, 0x1a, 0xba, 0x7b, 0x6d, 0xa1, 0xa3, 0x09, 0xf4, 0x6b, 0xf9, 0x18, 0x1a,
	0x25, 0x0b, 0x83, 0xe4, 0x31, 0xb4, 0x50, 0x6b, 0xa9, 0x6b, 0xe9, 0x3a, 0x65, 0xd3, 0x69, 0x09,
	0xb0, 0x0a, 0x1f, 0x7d, 0xf5, 0x21, 0x3c, 0x45, 0x63, 0xf8, 0x27, 0x47, 0x56, 0x65, 0xad, 0x26,
	0xd9, 0x15, 0x67, 0x15, 0x4e, 0x86, 0xb0, 0xaf, 0x56, 0x47, 0xa8, 0xa4, 0x5d, 0xc7, 0xb7, 0x75,
	0x0f, 0xee, 0xd0, 0x7d, 0x6f, 0xa3, 0xfb, 0xdf, 0x4b, 0xf9, 0x08, 0xc0, 0x8a, 0x1c, 0x8d, 0xe5,
	0xb9, 0xaa, 0x54, 0x0c, 0x58, 0x03, 0x21, 0xf7, 0xa0, 0x35, 0xd3, 0x52, 0x19, 0x1a, 0xba, 0x54,
	0x15, 0x34, 0xe7, 0xbb, 0xff, 0xa7, 0xf9, 0x8e, 0x4e, 0xe0, 0xe0, 0x56, 0x86, 0xdc, 0x87, 0xb6,
	0xc9, 0x2e, 0x31, 0xe7, 0x4e, 0x93, 0x0e, 0xab, 0x23, 0x42, 0x37, 0x55, 0x2b, 0x21, 0xd6, 0x25,
	0xbe, 0xf9, 0xd0, 0x3f, 0x5b, 0xa4, 0x26, 0xd3, 0x22, 0xc5, 0x7f, 0x67, 0xe3, 0xb7, 0x30, 0x70,
	0xb6, 0x61, 0x78, 0xb5, 0x10, 0x1a, 0x67, 0x95, 0xa9, 0x6a, 0x4b, 0xdf, 0xed, 0xb5, 0x5d, 0x9b,
	0x48, 0x0c, 0xfd, 0x52, 0xbb, 0x37, 0x5c, 0xcc, 0x71, 0x36, 0x2d, 0x09, 0xb4, 0x15, 0x79, 0xf1,
	0x3e, 0xdb, 0x86, 0x77, 0x38, 0xb3, 0xbd, 0xd3, 0x99, 0xdf, 0x3d, 0x18, 0xd4, 0xa2, 0xb8, 0xa1,
	0x36, 0x1c, 0xf7, 0x5b, 0x7b, 0x92, 0x17, 0x70, 0x78, 0xe1, 0xfa, 0x9d, 0xf3, 0xb9, 0x98, 0x71,
	0x67, 0x11, 0x7f, 0x9b, 0xfb, 0x0b, 0x85, 0x3c, 0x81, 0x30, 0xaf, 0x5a, 0x38, 0x8d, 0xba, 0x93,
	0x6e, 0xc9, 0xae, 0xbb, 0xb2, 0x55, 0x6e, 0x72, 0x03, 0xed, 0x8f, 0x27, 0xe7, 0xd3, 0xd3, 0xf7,
	0xe4, 0x18, 0xc2, 0xfa, 0xe9, 0x90, 0xca, 0x1f, 0xcd, 0x6f, 0x68, 0x38, 0x68, 0x40, 0xeb, 0xa7,
	0xf5, 0x12, 0x3a, 0xeb, 0x39, 0x13, 0xc7, 0xd8, 0x1a, 0xfb, 0xf0, 0x41, 0x03, 0x6c, 0x5e, 0xfb,
	0xc8, 0x4b, 0xdb, 0xee, 0xc7, 0x7b, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x64, 0xfb, 0x73,
	0x11, 0x05, 0x00, 0x00,
}
