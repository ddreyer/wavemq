syntax = "proto3";
//Version 1.0
package pb;

import "eapi.proto";

service WAVEMQ {
  rpc Publish(PublishParams) returns (PublishResponse);
  rpc Subscribe(SubscribeParams) returns (stream SubscriptionMessage);
}

message PeerSubscriptionTBS {
  bytes sourceEntity = 1;
  bytes namespace = 2;
  string uri = 3;
  string id = 4;
}

message PeerSubscription {
  PeerSubscriptionTBS tbs = 1;
  bytes signature = 2;
  bytes proofDER = 3;
}

message PublishParams{
  Perspective perspective = 1;
  bytes namespace = 2;
  string uri = 3;
  repeated PayloadObject content = 4;
  //If specified, the message will be encrypted
  repeated bytes encryptionPartition = 5;
  //Should this message be persisted
  bool persist = 6;
  //If specified, this proof will be used instead of building one
  bytes customProofDER = 7;

}
message PublishResponse{
  Error error = 1;
}
message MessageTBS {
  bytes sourceEntity = 1;
  LocationURI sourceLocation = 2;
  bytes namespace = 3;
  string uri = 4;
  repeated PayloadObject payload = 5;
}
message Message {
  Proof proof = 1;
  bytes proofDER = 2;
  MessageTBS tbs = 3;
  bytes signature = 4;
  repeated bytes encryptionPartition = 5;
  repeated int64 timestamps = 6;
  repeated int64 drops = 7;
  bool persist = 8;
}
message PayloadObject {
  string schema = 1;
  bytes content = 2;
}

message SubscribeParams {
  Perspective perspective = 1;
  bytes namespace = 2;
  string uri = 3;
  //If specified, this proof will be used instead of building one for the
  //subscribe
  bytes customProofDER = 4;
  //The unique identifier for the subscription. This enables you to resume
  //a previous subscription
  string identifier = 5;
}

message SubscriptionMessage {
  Error error = 1;
  Message message = 2;
}
