syntax = "proto3";
//Version 1.0
package pb;

import "eapi.proto";

service WAVEMQ {
  rpc Publish(PublishParams) returns (PublishResponse);
  rpc Subscribe(SubscribeParams) returns (stream SubscriptionMessage);
}

message PublishParams{
  Perspective perspective = 1;
  bytes namespace = 2;
  string uri = 3;
  repeated PayloadObject content = 4;
  //If specified, the message will be encrypted
  repeated bytes encryptionPartition = 5;
  //If specified a proof with these specific properties will be
  //attached to the message, rather than just a publish proof.
  //The namespace can be omitted, but all other normal fields must
  //be filled in
  repeated RTreePolicyStatement extraStatements = 6;
  //If specified, this proof will be used instead of building one
  bytes customProofDER = 7;
}
message PublishResponse{
  Error error = 1;
}
message MessageTBS {
  bytes sourceEntity = 1;
  LocationURI sourceLocation = 2;
  bytes namespace = 3;
  string uri = 4;
  repeated PayloadObject = 5;
}
message Message {
  Proof proof = 1;
  bytes proofDER = 2;
  MessageTBS tbs = 3;
  bytes signature = 4;
  repeated bytes encryptionPartition = 5;
  repeated int64 timestamps = 6;
  repeated int64 drops = 7;
  bool persist = 8;
}
message PayloadObject {
  string schema = 1;
  bytes content = 2;
}

message SubscribeParams {
  Perspective perspective = 1;
  bytes namespace = 2;
  string uri = 3;

  //Require that messages published to the given resource have a superset
  //of the following statements in their proof. Messages that fail these
  //but pass the normal publish requirements will still be delivered
  //but marked as failed if dropFailedExtra is false
  repeated RTreePolicyStatement extraRequiredPolicy = 4;
  bool dropFailedExtra = 5;

  //If specified, this proof will be used instead of building one for the
  //subscribe
  bytes customProofDER = 6;
}

message SubscriptionMessage {
  Error error = 1;
  //If a message came in that failed one of the additional validation
  //requirements, this field will be set and the message will still
  //be included. If the message failed the publish requirements then
  //no SubscriptionMessage will be sent at all, because the sender was
  //aware the message would fail, so must be malicious.
  Error failedValidation = 2;
  Message message = 3;
}
